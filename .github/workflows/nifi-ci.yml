name: Clone Repository on PR or Merge to Main

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  clone-repo:
    runs-on: [self-hosted, nifi]

    steps:
      - name: Checkout Repository
        run: |
          git fetch --prune --unshallow
          git checkout main
          git pull

      - name: Extract branch name
        shell: bash
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch

      - name: Get changed files
        id: changed-files
        run: |
          changed_files=$(git diff --name-only ${{ steps.extract_branch.outputs.branch }} $(git merge-base ${{ steps.extract_branch.outputs.branch }} main ))
          echo "::set-output name=all_changed_files::${changed_files}"

      - name: List all changed files
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
          done

      - name: Prepare User Directory
        run: |
          user_directory="/home/ec2-user/nifi/repositorios"
          repo_name="${{ github.event.repository.name }}"

          # Lista de directorios a eliminar
          delete_directories=()

          # Identifica los directorios de Iniciativa y Subiniciativa de los archivos modificados
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file =~ ^[^/]+/[^/]+/ ]]; then
              dir_name=$(dirname "$file")
              delete_directories+=("$dir_name")
            fi
          done

          # Elimina los directorios identificados
          for delete_dir in "${delete_directories[@]}"; do
            target_directory="$user_directory/$repo_name/$delete_dir"
            if [ -d "$target_directory" ]; then
              echo "Deleting previous contents of $target_directory"
              rm -rf "$target_directory"
            fi
          done

          # Crea el directorio
          mkdir -p "$user_directory/$repo_name"

      - name: Copia queries y ddl
        run: |
          user_directory="/home/ec2-user/nifi/repositorios"
          repo_name="${{ github.event.repository.name }}"

          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            if [[ $file =~ ^[^/]+/[^/]+/ ]]; then
              dir_name=$(dirname "$file")
              dest_dir="$user_directory/$repo_name/$dir_name"
              mkdir -p "$dest_dir"
              cp -R "$dir_name/." "$dest_dir"
            fi
          done
